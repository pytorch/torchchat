name: Run the README instructions - with stories and new template

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-readme-any:
    strategy:
      matrix:
        runner: [linux.g5.4xlarge.nvidia.gpu]
    runs-on: ${{matrix.runner}}
    steps:
      - uses: actions/checkout@v3 # Updated to v3
      - uses: actions/setup-python@v4 # Updated to v4
        with:
          python-version: '3.10.11'
      - uses: maxim-lobanov/setup-xcode@v1 # This action is fine
        if: runner.os == 'macOS'
        with:
          xcode-version: '15.3' # Or latest stable if possible
      - run: |
          uname -a
          if [ $(uname -s) == Darwin ]; then
            sysctl machdep.cpu.brand_string
            sysctl machdep.cpu.core_count
          fi
      - run: |
          echo "Summary pip3 packages"
          export TORCHCHAT_ROOT=$PWD
          pip3 list
          python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
          python3 -c 'import torchvision;print(f"torchvision: {torchvision.__version__, torchvision.version.git_version}")'
      - run: |
          echo "::group::Print machine info and try install pip and/or pip3"
          set -x
          which pip || true
          which pip3 || true
          which conda || true
          uname -a
          echo "::endgroup::"

          . .ci/scripts/run-docs readme

          echo "::group::Completion"
          echo "tests complete"
          echo "*******************************************"
          echo "::endgroup::"

  test-readme-cpu:
    strategy:
      matrix:
        runner: [linux.g5.4xlarge.nvidia.gpu]
    runs-on: ${{matrix.runner}}
    steps:
      - uses: actions/checkout@v3 # Updated to v3
      - uses: actions/setup-python@v4 # Updated to v4
        with:
          python-version: '3.10.11'
      - uses: maxim-lobanov/setup-xcode@v1 # This action is fine
        if: runner.os == 'macOS'
        with:
          xcode-version: '15.3' # Or latest stable if possible
      - run: |
          uname -a
          if [ $(uname -s) == Darwin ]; then
            sysctl machdep.cpu.brand_string
            sysctl machdep.cpu.core_count
          fi
      - run: |
          echo "Summary pip3 packages"
          export TORCHCHAT_ROOT=$PWD
          pip3 list
          python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
          python3 -c 'import torchvision;print(f"torchvision: {torchvision.__version__, torchvision.version.git_version}")'
      - run: |
          echo "::group::Print machine info and try install pip and/or pip3"
          set -x
          which pip || true
          which pip3 || true
          which conda || true
          uname -a
          echo "::endgroup::"

          export TORCHCHAT_DEVICE=cpu 
          . .ci/scripts/run-docs readme

          echo "::group::Completion"
          echo "tests complete"
          echo "*******************************************"
          echo "::endgroup::"

  test-quantization-any:
    strategy:
      matrix:
        runner: [linux.g5.4xlarge.nvidia.gpu]
    runs-on: ${{matrix.runner}}
    steps:
      - uses: actions/checkout@v3 # Updated to v3
      - uses: actions/setup-python@v4 # Updated to v4
        with:
          python-version: '3.10.11'
      - uses: maxim-lobanov/setup-xcode@v1 # This action is fine
        if: runner.os == 'macOS'
        with:
          xcode-version: '15.3' # Or latest stable if possible
      - run: |
          uname -a
          if [ $(uname -s) == Darwin ]; then
            sysctl machdep.cpu.brand_string
            sysctl machdep.cpu.core_count
          fi
      - run: |
          echo "Summary pip3 packages"
          export TORCHCHAT_ROOT=$PWD
          pip3 list
          python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
          python3 -c 'import torchvision;print(f"torchvision: {torchvision.__version__, torchvision.version.git_version}")'
      - run: |
          echo "::group::Print machine info and try install pip and/or pip3"
          set -x
          which pip || true
          which pip3 || true
          which conda || true
          uname -a
          echo "::endgroup::"

          . .ci/scripts/run-docs quantization

          echo "::group::Completion"
          echo "tests complete"
          echo "*******************************************"
          echo "::endgroup::"

  test-quantization-cpu:
    strategy:
      matrix:
        runner: [linux.g5.4xlarge.nvidia.gpu]
    runs-on: ${{matrix.runner}}
    steps:
      - uses: actions/checkout@v3 # Updated to v3
      - uses: actions/setup-python@v4 # Updated to v4
        with:
          python-version: '3.10.11'
      - uses: maxim-lobanov/setup-xcode@v1 # This action is fine
        if: runner.os == 'macOS'
        with:
          xcode-version: '15.3' # Or latest stable if possible
      - run: |
          uname -a
          if [ $(uname -s) == Darwin ]; then
            sysctl machdep.cpu.brand_string
            sysctl machdep.cpu.core_count
          fi
      - run: |
          echo "Summary pip3 packages"
          export TORCHCHAT_ROOT=$PWD
          pip3 list
          python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
          python3 -c 'import torchvision;print(f"torchvision: {torchvision.__version__, torchvision.version.git_version}")'
      - run: |
          echo "::group::Print machine info and try install pip and/or pip3"
          set -x
          which pip || true
          which pip3 || true
          which conda || true
          uname -a
          echo "::endgroup::"

          export TORCHCHAT_DEVICE=cpu 
          . .ci/scripts/run-docs quantization

          echo "::group::Completion"
          echo "tests complete"
          echo "*******************************************"
          echo "::endgroup::"

  test-advanced-any:
    strategy:
      matrix:
        runner: [linux.g5.4xlarge.nvidia.gpu]
    runs-on: ${{matrix.runner}}
    steps:
      - uses: actions/checkout@v3 # Updated to v3
      - uses: actions/setup-python@v4 # Updated to v4
        with:
          python-version: '3.10.11'
      - uses: maxim-lobanov/setup-xcode@v1 # This action is fine
        if: runner.os == 'macOS'
        with:
          xcode-version: '15.3' # Or latest stable if possible
      - run: |
          uname -a
          if [ $(uname -s) == Darwin ]; then
            sysctl machdep.cpu.brand_string
            sysctl machdep.cpu.core_count
          fi
      - run: |
          echo "Summary pip3 packages"
          export TORCHCHAT_ROOT=$PWD
          pip3 list
          python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
          python3 -c 'import torchvision;print(f"torchvision: {torchvision.__version__, torchvision.version.git_version}")'
      - run: |
          echo "::group::Print machine info and try install pip and/or pip3"
          set -x
          which pip || true
          which pip3 || true
          which conda || true
          uname -a
          echo "::endgroup::"

          . .ci/scripts/run-docs advanced

          echo "::group::Completion"
          echo "tests complete"
          echo "*******************************************"
          echo "::endgroup::"

  test-advanced-cpu:
    strategy:
      matrix:
        runner: [linux.g5.4xlarge.nvidia.gpu]
    runs-on: ${{matrix.runner}}
    steps:
      - uses: actions/checkout@v3 # Updated to v3
      - uses: actions/setup-python@v4 # Updated to v4
        with:
          python-version: '3.10.11'
      - uses: maxim-lobanov/setup-xcode@v1 # This action is fine
        if: runner.os == 'macOS'
        with:
          xcode-version: '15.3' # Or latest stable if possible
      - run: |
          uname -a
          if [ $(uname -s) == Darwin ]; then
            sysctl machdep.cpu.brand_string
            sysctl machdep.cpu.core_count
          fi
      - run: |
          echo "Summary pip3 packages"
          export TORCHCHAT_ROOT=$PWD
          pip3 list
          python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
          python3 -c 'import torchvision;print(f"torchvision: {torchvision.__version__, torchvision.version.git_version}")'
      - run: |
          echo "::group::Print machine info and try install pip and/or pip3"
          set -x
          which pip || true
          which pip3 || true
          which conda || true
          uname -a
          echo "::endgroup::"

          export TORCHCHAT_DEVICE=cpu 
          . .ci/scripts/run-docs advanced

          echo "::group::Completion"
          echo "tests complete"
          echo "*******************************************"
          echo "::endgroup::"

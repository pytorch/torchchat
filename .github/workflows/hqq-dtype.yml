name: Run HQQ tests

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-hqq:
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      runner: linux.g5.4xlarge.nvidia.gpu
      gpu-arch-type: cuda
      gpu-arch-version: "12.1"
      script: |
        echo "::group::Print machine info"
        uname -a
        echo "::endgroup::"

        echo "::group::Install newer objcopy that supports --set-section-alignment"
        yum install -y  devtoolset-10-binutils
        export PATH=/opt/rh/devtoolset-10/root/usr/bin/:$PATH
        echo "::endgroup::"


        echo "::group::Download checkpoints"
        # Install requirements
        ./install_requirements.sh cuda
        bash scripts/build_native.sh aoti
        pip3 list
        python3 -c 'import torch;print(f"torch: {torch.__version__, torch.version.git_version}")'
        # needed to check for gibberish
        yum install -y aspell aspell-en
        echo "::endgroup::"

        echo "::group::Download checkpoints"
        mkdir -p checkpoints/stories15M
        pushd checkpoints/stories15M
        wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.pt
        wget https://github.com/karpathy/llama2.c/raw/master/tokenizer.model
        popd
        echo "::endgroup::"

        echo "::group::Run inference"
        export MODEL_PATH=checkpoints/stories15M/stories15M.pt
        export TOKENIZER_PATH=checkpoints/stories15M/tokenizer.model
        export MODEL_NAME=stories15M
        export MODEL_DIR=/tmp

        export PROMPT="Once upon a time in a land far away"
        
        for DEVICE in cpu cuda; do 
         for DTYPE in bfloat16 float16 float32; do

          python generate.py --dtype ${DTYPE} --device ${DEVICE} --checkpoint-path ${MODEL_PATH} --temperature 0 > ./output_eager
          .ci/scripts/check_gibberish ./output_eager
          python generate.py --dtype ${DTYPE} --device ${DEVICE} --compile --checkpoint-path ${MODEL_PATH} --temperature 0 > ./output_compiled
          .ci/scripts/check_gibberish ./output_compiled
          python export.py --dtype ${DTYPE} --device ${DEVICE} --checkpoint-path ${MODEL_PATH} --output-dso-path ${MODEL_DIR}/${MODEL_NAME}.so
          python generate.py --dtype ${DTYPE} --device ${DEVICE} --checkpoint-path ${MODEL_PATH} --temperature 0 --dso-path ${MODEL_DIR}/${MODEL_NAME}.so  > ./output_aoti
          .ci/scripts/check_gibberish ./output_aoti

          ./cmake-out/aoti_run ${MODEL_DIR}/${MODEL_NAME}.so -d ${DEVICE} -z ${TOKENIZER_PATH} -i "${PROMPT}" > ./output_runner_aoti
          cat ./output_runner_aoti
          # .ci/scripts/check_gibberish ./output_runner_aoti --no-extract

          echo "**********************************************"
          echo "******** INT4 HQQ group-wise quantized *******"
          echo "**********************************************"
          python generate.py --dtype ${DTYPE} --device ${DEVICE} --quant '{"linear:hqq" : {"groupsize": 32}}' --checkpoint-path ${MODEL_PATH} --temperature 0 > ./output_eager
          .ci/scripts/check_gibberish ./output_eager
          python generate.py --dtype ${DTYPE} --device ${DEVICE} --compile --quant '{"linear:hqq" : {"groupsize": 32}}' --checkpoint-path ${MODEL_PATH} --temperature 0 > ./output_compiled
          .ci/scripts/check_gibberish ./output_compiled
          python export.py --dtype ${DTYPE} --device ${DEVICE} --quant '{"linear:hqq" : {"groupsize": 32}}' --checkpoint-path ${MODEL_PATH} --output-dso-path ${MODEL_DIR}/${MODEL_NAME}.so
          python generate.py --dtype ${DTYPE} --device ${DEVICE} --checkpoint-path ${MODEL_PATH} --temperature 0 --dso-path ${MODEL_DIR}/${MODEL_NAME}.so  > ./output_aoti
          .ci/scripts/check_gibberish ./output_aoti

          ./cmake-out/aoti_run ${MODEL_DIR}/${MODEL_NAME}.so -d ${DEVICE} -z ${TOKENIZER_PATH} -i "${PROMPT}" > ./output_runner_aoti
          cat ./output_runner_aoti
          # .ci/scripts/check_gibberish ./output_runner_aoti --no-extract

         done
        done

        echo "tests complete"
        echo "******************************************"
        echo "::endgroup::"
